<?xml version = "1.0" encoding = "utf-8"?>
<!--
  - Kerneos
  - Copyright (C) 2012 Bull S.A.S.
  - Contact: jasmine AT ow2.org
  -
  - This library is free software; you can redistribute it and/or
  - modify it under the terms of the GNU Lesser General Public
  - License as published by the Free Software Foundation; either
  - version 2.1 of the License, or any later version.
  -
  - This library is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  - Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public
  - License along with this library; if not, write to the Free Software
  - Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
  - USA
  -
  - $Id$
  -->
<kerneos:KerneosModuleFragment
        xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:view="ICICI.view.*"
        xmlns:kerneos="org.ow2.kerneos.core.api.*"
        width="100%"
        open="openModule()"
        close="closeModule()"
        height="100%">

    <fx:Metadata>
        [ResourceBundle("moduleFragmentResources")]
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
        import ICICI.control.Controller;
        import ICICI.model.ModuleFragmentModelLocator;

        // =========================================================================
        // Implementation of KerneosModule
        // =========================================================================
        private static var instance:MyModuleFragment;
        private var controller:Controller;
        private var model:ModuleFragmentModelLocator;

        public static function getInstance():MyModuleFragment {
            return instance;
        }

        public function getModel():ModuleFragmentModelLocator {
            return model;
        }

        /**
         * When the module is loading
         */
        public function openModule():void {
            instance = this;
            model = new ModuleFragmentModelLocator();
            controller = new Controller(this.getDispatcher());
            controller.initialiseCommands();
        }

        /**
         * When the module is closing, cut off all client-server communications
         */
        public function closeModule():void {
            controller.removeCommands()
        }
        ]]>
    </fx:Script>

    <!-- Instantiate the main view -->
    <view:MainView id="mainView"/>

</kerneos:KerneosModuleFragment>
